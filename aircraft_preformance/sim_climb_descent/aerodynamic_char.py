import numpy as np

from . import ureg
from ..helpers.aerodynamics import c_l_steady
from ..helpers.airspeed import cas2tas, cas2mach
from ambiance import Atmosphere


def aoa_steady_staight(v_cas, h, w, s):
    """
    Calculate the angle of attack (AoA) for steady straight flight.

    This function computes the angle of attack in radians based on the
    lift coefficient for steady straight flight conditions. It uses the
    linear relationship between the lift coefficient and the angle of attack
    to derive the AoA. Refer to the simulation PDF document for details.

    Parameters:
        v_cas (float): Calibrated airspeed (CAS) in m/s.
        h (float): Altitude in meters.
        w (float): Aircraft weight in Newtons.
        s (float): Wing surface area in square meters.

    Returns:
        float: Angle of attack (AoA) in radians, rounded to 4 decimal places.
    """

    lift_coeff = c_l_steady(v_cas, h, w, s)

    # return angle of attack in rad
    return np.round((lift_coeff - 0.03) / 4.4 * ureg("1 rad"), 4)


def lift_drag_polars(mach):
    """
    Calculate the zero-lift drag coefficient (c_d0) and the induced drag factor (k)
    based on the given Mach number. Refer to the simulation PDF document for details.
    This function uses predefined values of Mach numbers, zero-lift drag coefficients,
    and induced drag factors to determine the aerodynamic characteristics.

    Parameters:
        mach (float or Quantity): The Mach number for which the aerodynamic
                                  characteristics are to be determined. If a
                                  Quantity object is provided, its magnitude
                                  will be used.
    Returns:
        tuple: A tuple containing:
            - c_d0 (float): The zero-lift drag coefficient.
            - k (float): The induced drag factor.
    Raises:
        ValueError: If the Mach number exceeds the maximum allowed value of 0.85.
    Notes:
        - The function uses predefined values of Mach numbers, zero-lift drag
          coefficients, and induced drag factors.
        - If the Mach number is less than or equal to 0.3, the function returns
          the values corresponding to the lowest Mach number.
        - For Mach numbers between 0.3 and 0.85, the function interpolates the
          values by iterating through the predefined lists.
    Example:
        >>> c_d0, k = lift_drag_polars(0.5)
        >>> print(c_d0, k)
        0.0131 0.057
    """

    mach = mach.magnitude
    # initialize values
    mach_numbers = [0.3, 0.5, 0.6, 0.7, 0.8, 0.85]
    c_d0 = [0.0132, 0.0131, 0.0131, 0.0130, 0.0130, 0.0128]
    k = [0.056, 0.057, 0.058, 0.061, 0.067, 0.074]
    # check
    if mach > mach_numbers[-1]:
        raise ValueError(
            f"Mach number should be lower than constant cruise mach of 0.85"
        )

    if mach <= 0.3:
        return c_d0[0], k[0]
    else:
        mach_numbers.reverse()
        c_d0.reverse()
        k.reverse()
        for i in range(len(mach_numbers)):
            if mach >= mach_numbers[i]:
                return c_d0[i], k[i]


# compute drag coeff
def drag_coeff(mach, c_l):
    """
    Calculate the drag coefficient for a given Mach number and lift coefficient.

    The drag coefficient is computed using the drag polar equation:
    C_d = C_d0 + k * C_l^2, where C_d0 is the zero-lift drag coefficient
    and k is the induced drag factor. These values are obtained from the
    `lift_drag_polars` function based on the Mach number.

    Args:
        mach (float): The Mach number, representing the ratio of the object's
                      speed to the speed of sound.
        c_l (float): The lift coefficient, representing the lift force
                     generated by the aircraft.

    Returns:
        float: The drag coefficient (C_d) for the given Mach number and lift coefficient.
    """

    c_d0, k = lift_drag_polars(mach)
    return c_d0 + (k * c_l**2)


# compute drag based on drag equation
def drag(v_cas, h, c_l, s):
    """
    Calculate the aerodynamic drag force on an aircraft.

    Parameters:
    -----------
    v_cas : Quantity
        Calibrated airspeed (CAS) of the aircraft, typically in units of speed (e.g., m/s or knots).
    h : Quantity
        Altitude of the aircraft, typically in units of length (e.g., meters or feet).
    c_l : float
        Coefficient of lift (dimensionless).
    s : Quantity
        Wing reference area of the aircraft, typically in units of area (e.g., m² or ft²).

    Returns:
    --------
    Quantity
        The aerodynamic drag force, rounded to 4 decimal places, in the preferred unit of force (newtons).

    Notes:
    ------
    - The function uses the atmospheric density at the given altitude to compute drag.
    - The drag coefficient (c_d) is calculated based on the Mach number and lift coefficient.
    - True airspeed (TAS) is derived from the calibrated airspeed (CAS) and altitude.
    """

    rho = Atmosphere(h.to("m").m).density[0] * ureg("kg/m**3")
    v_tas = cas2tas(v_cas, h)
    c_d = drag_coeff(cas2mach(v_cas, h), c_l)
    drag = c_d * (1 / 2) * rho * s * v_tas**2
    return np.round(drag, 4).to_preferred()


def gamma_steady_straight(thrust, drag, w):
    """
    Calculate the flight path angle (gamma) for steady and straight flight.

    Parameters:
    thrust (float): The thrust force acting on the aircraft (in Newtons).
    drag (float): The drag force acting on the aircraft (in Newtons).
    w (float): The weight of the aircraft (in Newtons).

    Returns:
    float: The flight path angle (gamma) in radians.

    Notes:
    - The flight path angle is calculated using the relationship:
      gamma = arcsin((thrust - drag) / weight).
    """

    # return gamma in radians
    return np.arcsin((thrust - drag) / w)
